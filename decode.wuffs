packageid "zstd"

pub struct decoder?(
)

pub error "not a frame"
pub error "frame reserved bit was set"
pub error "reserved block type found"
pub error "block size is larger than 128KiB"
pub error "block size is larger than window size"

pub error "TODO"

pub func decoder.decode?(dst writer1, src reader1)() {
	var magic u32 = in.src.read_u32le?()
	if magic != frameMagicNumber {
		return error "not a frame"
	}

	var frameHeader u8 = in.src.read_u8?()

	var fcsFlag u8[..0x3] = frameHeader >> 6
	var fcsFieldSize u8 = fcsFieldSizes[fcsFlag]

	var singleSegment bool = ((frameHeader >> 5) & 1) == 1
	if (fcsFlag == 0) and singleSegment {
		fcsFieldSize = 1
	}

	var frameContSize u64
	if fcsFieldSize == 1 {
		frameContSize = in.src.read_u8?() as u64
	} else if fcsFieldSize == 2 {
		frameContSize = (in.src.read_u16le?() as u64) + 256
	} else if fcsFieldSize == 4 {
		frameContSize = in.src.read_u32le?() as u64
	} else if fcsFieldSize == 8 {
		// TODO: read_u64le doesn't seem to compile
	} else {
		// TODO: prove this can't happen?
	}

	var windowSize u64 = minWindowSize
	if not singleSegment {
		return error "TODO"
	} else {
		windowSize = frameContSize
	}

	if ((frameHeader >> 3) & 1) == 1 {
		return error "frame reserved bit was set"
	}

	var hashing bool = ((frameHeader >> 2) & 1) == 1
	// TODO: do the hashing

	// TODO: possibly read dictionary ID

	while true {
		// spaghetti code to read a three-byte little endian number
		var blockLower u32[..0xFF] = in.src.read_u8?() as u32
		var blockUpper u32[..0xFFFF] = in.src.read_u16le?() as u32
		var blockHeader u32[..0xFFFFFF] = (blockUpper << 8) | blockLower

		var isLastBlock bool = (blockHeader & 1) == 1

		var blockType u8[..0x3] = ((blockHeader >> 1) & 3) as u8

		var blockSize u32[..0x1FFFFF] = blockHeader >> 3
		if blockSize > 131072 {
			return error "block size is larger than 128KiB"
		}
		if (blockSize as u64) > windowSize {
			return error "block size is larger than window size"
		}

		var b u8
		if blockType == blockTypeRaw {
			in.dst.copy_from_reader32(r:in.src, length:blockSize)
		} else if blockType == blockTypeRLE {
			b = in.src.read_u8?()
			var i u32
			while i < blockSize, inv blockSize <= 131072 {
				assert i <= 131072 via "a <= b: a <= c; c <= b"(c:blockSize)
				in.dst.write_u8?(x:b)
				i += 1
			}
		} else if blockType == blockTypeCompressed {
			return error "TODO"
		} else {
			return error "reserved block type found"
		}
		if isLastBlock {
			break
		}
	}
}
